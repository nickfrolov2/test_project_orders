package main

import (
	"database/sql"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"net/http"

	"github.com/gorilla/mux"
	_ "github.com/lib/pq"
)

var db *sql.DB

// Order - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
type Order struct {
	CustomerName  string `json:"customer_name"`
	City          string `json:"city"`
	PhoneNumber   string `json:"phone_number"`
	Email         string `json:"email"`
	ArticleNumber string `json:"article_number"`
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func initDB(host string, port int, user, password, dbname string) {
	var err error
	connStr := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",
		host, port, user, password, dbname)

	db, err = sql.Open("postgres", connStr)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}

	err = db.Ping()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: %v", err)
	}

	log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
func createOrder(w http.ResponseWriter, r *http.Request) {
	var order Order

	err := json.NewDecoder(r.Body).Decode(&order)
	if err != nil {
		http.Error(w, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON", http.StatusBadRequest)
		return
	}

	sqlStatement := `INSERT INTO orders (customer_name, city, phone_number, email, article_number) 
                   VALUES ($1, $2, $3, $4, $5) RETURNING id;`
	var orderID int

	err = db.QueryRow(sqlStatement, order.CustomerName, order.City, order.PhoneNumber, order.Email, order.ArticleNumber).Scan(&orderID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: %v\n", err)
		http.Error(w, "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID: %d\n", orderID)

	response := map[string]interface{}{
		"message":  "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: ",
		"order_id": orderID,
	}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func main() {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ —Ñ–ª–∞–≥–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	dbPort := flag.Int("port", 5481, "–ü–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
	serverPort := flag.Int("server-port", 8080, "–ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
	flag.Parse()

	// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Ä—Ç—ã
	log.Printf("üìå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç –¥–ª—è –ë–î: %d\n", *dbPort)
	log.Printf("üìå –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∞: %d\n", *serverPort)

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
	initDB("localhost", *dbPort, "postgres", "postgres", "postgres")
	defer db.Close()

	r := mux.NewRouter()
	r.HandleFunc("/order", createOrder).Methods("POST")

	fs := http.FileServer(http.Dir("./static"))
	r.PathPrefix("/").Handler(fs)

	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %d...", *serverPort)
	log.Fatal(http.ListenAndServe(fmt.Sprintf(":%d", *serverPort), r))
}
